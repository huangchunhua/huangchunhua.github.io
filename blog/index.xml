<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Huang Chunhua</title>
    <link>https://huangchunhua.github.io/blog/</link>
    <description>Recent content in Blog on Huang Chunhua</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 19 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://huangchunhua.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux Cgroups资源限制配置参数用法</title>
      <link>https://huangchunhua.github.io/blog/linuxcgroups%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E7%94%A8%E6%B3%95/</link>
      <pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huangchunhua.github.io/blog/linuxcgroups%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E7%94%A8%E6%B3%95/</guid>
      <description>背景 Cgroups是control groups的缩写，是Linux内核提供的一种可以限制、记录、隔离进程组（process groups）所使用的物理资源（如：cpu,memory,IO等等）的机制。最初由google的工程师提出，后来被整合进Linux内核。本文重点cgroups配置参数用法，目的是能为后续容器开发提供帮助。
配置参数用法 1.blkio - BLOCK IO资源管理 限额类 限额类是主要有两种策略，一种是基于完全公平队列调度的按权重分配各个cgroup所能占用总体资源的百分比。好处是当资源空闲时可以充分利用，但只能用于最底层节点cgroup的配置；另一种则是设定资源使用上限。这种限额在各个层次的cgroup都可以配置，但这种限制较为生硬并且容器之间依然会出现资源的竞争。
 按比例分配块设备IO资源  blkio.weight: 指定 cgroup 默认可用 IO 的比例（加权），值的范围为&amp;rdquo;100~1000&amp;rdquo;。该值可由具体设备的blkio.weight_device参数覆盖。例如：设置cgroup lv0的默认加权为 500： cgset -r blkio.weight=100 lv0。 blkio.weight_device：指定 cgroup 中指定设备的可用 IO 比例（加权），范围为&amp;rdquo;100~1000&amp;rdquo;，格式为&amp;rdquo;major:minor weight&amp;rdquo;。 例如：设置 cgroup lv0 对 /dev/sda 的加权为500。 cgset -r blkio.weight_device=&amp;ldquo;8:0 500&amp;rdquo; lv0。  控制IO读写速度上限  blkio.throttle.read_bps_device / blkio.throttle.write_bps_device：指定cgroup中某设备每秒钟读/写数据的字节上限。格式：major:minor bytes_per_second。例如：设置 cgroup lv0在/dev/sdc上每秒最多读 10KiB 数据： cgset -r blkio.throttle.read_bps_device=&amp;ldquo;8:32 10240&amp;rdquo; lv0。 blkio.throttle.read_iops_device / blkio.throttle.write_iops_device：指定cgroup中某设备每秒钟可以执行的读/写请求数上限。格式: major:minor operations_per_second。例如：设置cgroup lv0在/dev/sdc上每秒最多执行1000次读请求： cgset -r blkio.throttle.read_iops_device=&amp;ldquo;8:32 1000&amp;rdquo; lv0  针对特定操作(read, write, sync, 或async)设定读写速度上限</description>
    </item>
    
    <item>
      <title>Linux容器正确获取Loadavg的解决方案</title>
      <link>https://huangchunhua.github.io/blog/linux%E5%AE%B9%E5%99%A8%E6%AD%A3%E7%A1%AE%E8%8E%B7%E5%8F%96loadavg%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huangchunhua.github.io/blog/linux%E5%AE%B9%E5%99%A8%E6%AD%A3%E7%A1%AE%E8%8E%B7%E5%8F%96loadavg%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>背景 本文主要解决Linux容器中正确获取Loadavg信息。我们cat /proc/loadavg时会发现如下值：
$ &amp;gt; cat /proc/loadavg 0.64 0.81 0.86 3/364 6930  这些值的含义依次为：
 0.64：1-分钟平均负载。 0.81：5-分钟平均负载。 0.86：15-分钟平均负载。 3: 在采样时刻，运行队列的任务的数目。 364: 在采样时刻，系统中活跃的任务的个数（不包括运行已经结束的任务）。 6930: 最大的pid值，包括轻量级进程，即线程。  平均负载定义：在特定时间间隔内运行队列中的平均进程数。
进程状态定义  R (TASK_RUNNING)，可执行状态。 S (TASK_INTERRUPTIBLE)，可中断的睡眠状态。 D (TASK_UNINTERRUPTIBLE)，不可中断的睡眠状态。 T (TASK_STOPPED or TASK_TRACED)，暂停状态或跟踪状态。 Z (TASK_DEAD – EXIT_ZOMBIE)，退出状态，进程成为僵尸进程。 X (TASK_DEAD – EXIT_DEAD)，退出状态，进程即将被销毁。  如何计算Loadavg? 计算公式：load(t) = load(t-1) * exp(-5/60R) + n(t) * (1 – exp(5/60R))
n(t)是系统活动的进程数， R对应1、5、15分钟（如当计算15分钟的平均负载时，R的值就为15）。  Linux内核认为进程的生存时间服从参数为1的指数分布，指数分布的概率密度为：内核计算负载load1为例，设相邻两个计算时刻之间系统活动的进程集合为S0。从1分钟前到当前计算时刻这段时间里面活动的load1个进程，设他们的集合是S1，内核认为的概率密度是:λe-λx，而在当前时刻活动的n个进程，设他们的集合是Sn内核认为的概率密度是1-λe-λx。其中 x = 5 / 60，因为相邻两个计算时刻之间进程所耗的CPU时间为5秒，而考虑的时间段是1分钟(60秒)。那么可以求出最近1分钟系统运行队列的长度：
load1 = |S1| * λe-λx + |Sn| * (1-λe-λx) = load1 * λe-λx + n * (1-λe-λx) 其中λ = 1， x = 5 / 60， |S1|和|Sn|是集合元素的个数。  Linux内核定义一个unsigned long类型数组avenrun[3]，因为内核不能使用浮点数，就将低11位用于存放负载的小数部分，高21位用于存放整数部分。</description>
    </item>
    
  </channel>
</rss>